// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement;


import simbad.sim.*;
import RootElement.Robot;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;


/************************************************************/


public class Mapper extends Robot{
	
	public CameraSensor camera;
	public BufferedImage cameraImage;
		
	//CONSTRUCTOR
	public Mapper(Vector3d pos, String name, Color3f color) {
		super(pos, name);
		this.setColor(color);
		this.setMode("discover");
		camera = RobotFactory.addCameraSensor(this);
		this.sonars = RobotFactory.addSonarBeltSensor(this, 8);
		this.bumpers = RobotFactory.addBumperBeltSensor(this, 16);
		this.lamp = RobotFactory.addLamp(this);	
	}
	
	@Override
	public void initBehavior() {
		System.out.println("I exist and my name is: " + this.name);
	}
	
	public void targetDetected(){
		cameraImage = camera.createCompatibleImage();
		camera.copyVisionImage(cameraImage);
		Color pixelRGB = new Color(cameraImage.getRGB(50,50));
		int red = pixelRGB.getRed();
		int green = pixelRGB.getGreen();
		int blue = pixelRGB.getBlue();
		if (red > 0 && green == 0 && blue == 0){
			setMode("found");
		}
	}
	
	public Point3d pinpoint() {
        Point3d coordinates = new Point3d();
    	getCoords(coordinates);
    	coordinates.x = Math.round(coordinates.x);
    	coordinates.y = Math.round(coordinates.y);
    	coordinates.z = Math.round(coordinates.z);
    	return coordinates;
    }
		
	public void sendCoordinates(Point3d p3d){
		CentralStation.getInstance().setCoordinates(p3d);
	};
	
	public void obstacleDetected(){
		double leftSonar = sonars.getMeasurement(4);
		double rightSonar = sonars.getMeasurement(2);
		
		if((sonars.getFrontQuadrantHits() > 0) || rightSonar < 0.3 || leftSonar < 0.3){
			setMode("avoid");
		} else {
			setMode("discover");
		}
	}
	
	@Override
	public void setLocations(ArrayList<Point3d> pos){};
	
	
	public void performBehavior() {
		
		/*  
		 * 	Perform behavior runs even when instances are not attached to the environment
		 *	hence we need to make sure this method does not check/call attributes/methods
		 * 	of an instance that is being detached from the scene graph, otherwise a NullPointer 
		 * 	Exception is thrown
		 */
		
		if(this.itExists() && this.myTurn){
			
			if (getMode()!="done"){
				setTranslationalVelocity(0.5);
				
				if(getCounter() % 5 == 0) {
					isWorking();
					if(bumpers.oneHasHit()){
						rotateY(-35);
					}
					// with this two methods we change the current mode based on the bot state
					// sensors and bumpers are checked
					obstacleDetected();
					targetDetected();
					// now we check the current mode and behave consequently
					if(getMode()=="discover"){
						setTranslationalVelocity(0.5);
						if ((getCounter() % 50) == 0) {
							setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));
						}
					} else if(getMode()=="found"){
						setRotationalVelocity(0);
						double frontSonar = sonars.getMeasurement(0);
						if(frontSonar < 0.3){
							sendCoordinates(pinpoint());
							// after sending the target coords we must move away
							setMode("avoid");
						}
					} else if(getMode()=="avoid"){
						double frontSonar = sonars.getMeasurement(0);
						double frontLeftSonar = sonars.getMeasurement(5);
						double leftSonar = sonars.getMeasurement(4);
						double rightSonar = sonars.getMeasurement(2);
						double frontRightSonar = sonars.getMeasurement(1);
						avoidObstacle(leftSonar, frontLeftSonar, frontSonar, frontRightSonar, rightSonar);

					}
				}
			}
		} 
	}
}
	
	